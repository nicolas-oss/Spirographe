using System.Collections;
using System.Collections.Generic;
using UnityEngine;
 using UnityEngine.UI;

public class Calculs_Rayons : MonoBehaviour
{
    public GameObject DisquePrincipal,DisqueSecondaire,Rayon_1,Rayon_2,PositionInitialeAxe1,PositionInitialeAxe2,AxeRotation1,AxeRotation2,Crayon,CurrentLine;
	public float RayonDisque2 = 4f;
	float RayonPrincipal = 10f;
	public float RayonMaximal = 10f;
	public float HauteurDisque = 0.1f;
	public float DureeAnimation = 8.0f;
	Vector3 ScaleDisque1,ScaleDisque2,PosRayon1,PosRayon2;
	Animator AnimatorAxe1,AnimatorAxe2;
	
	public float FacteurTransmission = 2.0f;

	public int lengthOfLineRenderer = 2000;
	public float widthOfLineRenderer = 0.1f;
	public Color c1 = Color.yellow;
    public Color c2 = Color.red;
	
	Vector3 RotationAxe1,RotationAxe2;
	float CoefTransmission;
	Vector3 PointLineRenderer,PointInitial;
	
	int i=0;
	int LineCount=0;
	
	Text NameLine;
	
	Color ColorColorPicker;
	float Luminosite;
	
	// Start is called before the first frame update
    public void Start()
    {
        //GetAnimators
		AnimatorAxe1 = AxeRotation1.GetComponent<Animator>();
		AnimatorAxe2 = AxeRotation2.GetComponent<Animator>();
		
		//LineRenderer
		LineRenderer lineRenderer = CurrentLine.AddComponent<LineRenderer>();

		lineRenderer.material = new Material(Shader.Find("Sprites/Default"));
		
		// A simple 2 color gradient with a fixed alpha of 1.0f.
        float alpha = 1.0f;
        Gradient gradient = new Gradient();
        gradient.SetKeys(
            new GradientColorKey[] { new GradientColorKey(c1, 0.0f), new GradientColorKey(c2, 1.0f) },
            new GradientAlphaKey[] { new GradientAlphaKey(alpha, 0.0f), new GradientAlphaKey(alpha, 1.0f) }
        );
        lineRenderer.colorGradient = gradient;
		
		//Calcul Rayons et initialisation lineRenderer
		AjusteRayonDisque1();
		AjusteRayonDisque2();
		AjusteDureeAnims();
		ResetCurrentLineRenderer();
    }

    void Update()
    { 
	  //Calcul points
		LineRenderer lineRenderer = CurrentLine.GetComponent<LineRenderer>();
		        
		lineRenderer.widthMultiplier = widthOfLineRenderer;
        //lineRenderer.positionCount = i;
		
		if (i==lengthOfLineRenderer || ((PointLineRenderer-PointInitial).magnitude<0.2 && (PositionInitialeAxe1.transform.position-AxeRotation1.transform.position).magnitude<0.2 && (PositionInitialeAxe2.transform.position-AxeRotation2.transform.position).magnitude<0.2 && i>50))  //Stop anim si on revient au départ
			{
				lineRenderer.SetPosition(i-1,PointInitial); //on ferme la courbe
				AnimatorAxe1.SetBool("PlayRotationDisque1",false);
				AnimatorAxe2.SetBool("PlayRotationDisque2",false);
			}
		else
			{
			i++;
			PointLineRenderer = Crayon.transform.position;
			lineRenderer.positionCount = i;
			lineRenderer.SetPosition(i-1,PointLineRenderer);
			//FixPointLineRenderer(lineRenderer,i,lengthOfLineRenderer,PointLineRenderer);
			//Debug.Log("i=" + i + "     PointLineRenderer="+PointLineRenderer+"    PointInitial="+PointInitial);
			}		
        //}
	}
	
	public void FixPointLineRenderer(LineRenderer lineRenderer, int debut, int fin, Vector3 PointPosition)
	{
			for (int k = debut-1; k < fin; k++)
			{
				lineRenderer.SetPosition(k,PointPosition);
			}
	}
	
	public void ResetCurrentLineRenderer()
	{
		AnimatorAxe1.SetBool("PlayRotationDisque1",true);
		AnimatorAxe2.SetBool("PlayRotationDisque2",true);
		LineRenderer lineRenderer = CurrentLine.GetComponent<LineRenderer>();
		//initialisation compteur
		i=1;
		lineRenderer.positionCount = 1;
		//définition premier point linerenderer
		PointLineRenderer = Crayon.transform.position;
		lineRenderer.SetPosition(0,PointLineRenderer);
		//debut animation
		PointInitial=PointLineRenderer;
		PositionInitialeAxe1=AxeRotation1;
		PositionInitialeAxe2=AxeRotation2;
	}

	public void NewLineRenderer()
	{
		var NewLine = Instantiate(CurrentLine);
		LineCount++;
		
		var NewLineName = Instantiate(GameObject.Find("TextBase"));
		NameLine = NewLineName.GetComponent<Text>();
		//Debug.Log(NameLine);
		//GameObject NewLineName = new GameObject("NewLine");
		//NewLineName.transform.parent=GameObject.Find("ListSpiro").transform;
		NewLineName.transform.SetParent(GameObject.Find("ListSpiro").transform,false);
		//Text myText = NewLineName.AddComponent<Text>();
		//NewLineName.text = "Robert ";//+LineCount.ToString();
		NameLine.text = ("Spirographe n° "+LineCount.ToString());
		NewLine.name = NameLine.text;
	}
	
	public void DeleteLine(GameObject TextNameLine)
	{
		NameLine = TextNameLine.GetComponent<Text>();
		Destroy(GameObject.Find(NameLine.text));
		Destroy(TextNameLine);
	}
	
	public void ToggleVisibility(GameObject TextNameLine)
	{
		bool Visibility;
		NameLine = TextNameLine.GetComponent<Text>();
		Visibility=GameObject.Find(NameLine.text).GetComponent<Renderer>().enabled;
		GameObject.Find(NameLine.text).GetComponent<Renderer>().enabled=!Visibility;
	}

	public void AjusteRayonDisque1()
	{
		//Calcul et affectation Rayon Principal
		RayonPrincipal=RayonMaximal-RayonDisque2;
		//positionnnement par rapport à l'origine
		PosRayon1= new Vector3(RayonPrincipal,0.0f,0.0f);
		Rayon_1.transform.localPosition = PosRayon1;  
		//échelle du disque
		ScaleDisque1 = new Vector3(RayonMaximal*2,HauteurDisque,RayonMaximal*2);
		DisquePrincipal.transform.localScale = ScaleDisque1;
	}
	
	public void AjusteRayonDisque2()
	{	
		//positionnement par rapport au disque 1
		PosRayon2= new Vector3(RayonDisque2,0.0f,0.0f);
	    Rayon_2.transform.localPosition = PosRayon2;
		//échelle du disque 2
		ScaleDisque2 = new Vector3(RayonDisque2*2,HauteurDisque,RayonDisque2*2);
		DisqueSecondaire.transform.localScale = ScaleDisque2;
	}
	
	public void AjusteDureeAnims()
	{
		AnimatorAxe1.SetFloat("DureeRotationPrincipale",1.0f/DureeAnimation);
		AnimatorAxe2.SetFloat("DureeRotationSecondaire",1.0f/(DureeAnimation*RayonDisque2/(RayonMaximal*FacteurTransmission)));
	}
	
	public void SliderRayonDisque1()
	{
		RayonMaximal = GameObject.Find("SliderRayonDisque1").GetComponent <Slider> ().value;	
		AjusteRayonDisque1();		
		ResetCurrentLineRenderer();
	}
	
	public void SliderRayonDisque2()
	{		
		RayonDisque2 = GameObject.Find("SliderRayonDisque2").GetComponent <Slider> ().value;
		//Calcul et affectation Rayon secondaire
		AjusteRayonDisque2();	
		ResetCurrentLineRenderer();
	}
	
	public void SliderTransmission()
	{
		FacteurTransmission = GameObject.Find("SliderFacteurTransmission").GetComponent <Slider> ().value;
		AjusteDureeAnims();
		ResetCurrentLineRenderer();
	}
	
	public void SliderPalette()
	{
		Luminosite = GameObject.Find("SliderPalette").GetComponent <Slider> ().value;
		GameObject.Find("ImageColorPicker").GetComponent<Image>().color=Color.HSVToRGB(0,0,Luminosite);
		//GameObject.Find("ImageColorPicker").Image.Material.Color=Color.HSVToRGB(0,0,Luminosite);
	}
	
}
